name: Build and Test

on: [push, pull_request]

concurrency:
  group: ${{ github.repository }}-${{ github.event.number || github.head_ref || github.sha }}-${{ github.workflow }}
  cancel-in-progress: true

env:
  SEGFAULT_SIGNALS: all

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-24.04]
        #etcd: [v3.5.9]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Get time
        run: |
          date +'%Y-%m' > snapshot.txt

      - name: Cache for cccahe
        uses: actions/cache@v4
        with:
          path: /home/runner/.ccache
          key: ${{ runner.os }}-ccache-${{ hashFiles('**/snapshot.txt') }}
          restore-keys: |
            ${{ runner.os }}-ccache-

      - name: Install dependencies for Linux
        if: runner.os == 'Linux'
        run: |
#          sudo apt update -y
#          sudo apt install -y ca-certificates \
#                              ccache \
#                              libboost-all-dev \
#                              libcurl4-openssl-dev \
#                              libssl-dev \
#                              libz-dev \
#                              lsb-release \
#                              openssl \
#                              screenfetch \
#                              wget \
#                              etcd-client \
#                              etcd-server \
#                              cmake \
#                              libcpprest-dev \
          
          sudo apt-get update
          sudo apt-get install -y ca-certificates \
                                  ccache \
                                  libboost-all-dev \
                                  curl \
                                  libssl-dev \
                                  zlib1g-dev \
                                  lsb-release \
                                  openssl \
                                  screenfetch \
                                  wget \
                                  etcd-client \
                                  etcd-server \
                                  cmake \
                                  libcpprest-dev

          # install cmake
          # wget https://github.com/Kitware/CMake/releases/download/v3.19.3/cmake-3.19.3-Linux-x86_64.sh
          # sudo bash cmake-3.19.3-Linux-x86_64.sh --prefix /usr --skip-license

          # install clang-format
          sudo curl -L https://github.com/muttleyxd/clang-tools-static-binaries/releases/download/master-1d7ec53d/clang-format-11_linux-amd64 --output /usr/bin/clang-format
          sudo chmod +x /usr/bin/clang-format




      - name: Install etcd for Linux
        if: runner.os == 'Linux'
        run: |
          # install etcd
          git clone https://github.com/grpc/grpc.git --depth 1 --branch v1.60.x
          cd grpc/
          git submodule update --init
          mkdir cmake-build
          cd cmake-build/
          cmake .. -DBUILD_SHARED_LIBS=ON \
            -DgRPC_INSTALL=ON \
            -DgRPC_BUILD_TESTS=OFF \
            -DgRPC_BUILD_CSHARP_EXT=OFF \
            -DgRPC_BUILD_GRPC_CSHARP_PLUGIN=OFF \
            -DgRPC_BUILD_GRPC_NODE_PLUGIN=OFF \
            -DgRPC_BUILD_GRPC_OBJECTIVE_C_PLUGIN=OFF \
            -DgRPC_BUILD_GRPC_PHP_PLUGIN=OFF \
            -DgRPC_BUILD_GRPC_PYTHON_PLUGIN=OFF \
            -DgRPC_BUILD_GRPC_RUBY_PLUGIN=OFF \
            -DgRPC_BACKWARDS_COMPATIBILITY_MODE=ON \
            -DgRPC_ZLIB_PROVIDER=package \
            -DgRPC_SSL_PROVIDER=package
          make -j`nproc`
          sudo make install
          
          #wget https://github.com/etcd-io/etcd/releases/download/${{ matrix.etcd }}/etcd-${{ matrix.etcd }}-linux-amd64.tar.gz
          #tar zxvf etcd-${{ matrix.etcd }}-linux-amd64.tar.gz
          #sudo mv etcd-${{ matrix.etcd }}-linux-amd64/etcd /usr/local/bin/
          #sudo mv etcd-${{ matrix.etcd }}-linux-amd64/etcdctl /usr/local/bin/

   

      - name: Setup tmate session
        if: false
        uses: mxschmitt/action-tmate@v3

      - name: CMake
        run: |
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib:/usr/local/lib/x86_64-linux-gnu

          mkdir -p build
          cd build
          cmake .. -DCMAKE_CXX_STANDARD=17 \
                   -DCMAKE_CXX_STANDARD_REQUIRED=TRUE \
                   -DCMAKE_BUILD_TYPE=Debug \
                   -DBUILD_ETCD_TESTS=ON \
                   -DCMAKE_C_COMPILER_LAUNCHER=ccache \
                   -DCMAKE_CXX_COMPILER_LAUNCHER=ccache

      - name: Format
        if: runner.os == 'Linux'
        run: |
          cd build

          function prepend() { while read line; do echo "${1}${line}"; done; }

          make etcd_cpp_apiv3_clformat
          GIT_DIFF=$(git diff --ignore-submodules)
          if [[ -n $GIT_DIFF ]]; then
              echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
              echo "| clang-format failures found!"
              echo "|"
              echo "$GIT_DIFF" | prepend "| "
              echo "|"
              echo "| Run: "
              echo "|"
              echo "|    make etcd_cpp_apiv3_clformat"
              echo "|"
              echo "| to fix this error."
              echo "|"
              echo "| Ensure you are working with clang-format-11, which can be obtained from"
              echo "|"
              echo "|    https://github.com/muttleyxd/clang-tools-static-binaries/releases "
              echo "|"
              echo "~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"
              exit -1
          fi


      - name: Build
        run: |
          export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib:/usr/local/lib/x86_64-linux-gnu

          cd build
          make -j`nproc`
          sudo make install

      - name: Setup tmate session
        if: false
        uses: mxschmitt/action-tmate@v3


